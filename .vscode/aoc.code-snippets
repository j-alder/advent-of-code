{
	// Place your advent-of-code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"JavaScript boilerplate": {
		"scope": "javascript,typescript",
		"prefix": "jsbp",
		"description": "single day solution setup",
		"body": [
			"const { fmtAnsWithRuntime } = require('../util.js');",
			"",
			"function partOne(input) {",
			"}",
			"",
			"function partTwo(input) {",
			"}",
			"",
			"function soln(rawInput) {",
			"  const input = rawInput.split(\"\\n\");",
			"  fmtAnsWithRuntime("
            "    () => partOne(input),", 
            "    () => partTwo(input)",
            "  );"
			"}",
			"",
			"module.exports = { soln };",
			"",
			"/*",
			"$0",
			"*/"
		],
	},
	"Rust boilerplate": {
		"scope": "rust",
		"prefix": "rsbp",
		"body": [
			"use crate::util::format_soln_string;"
			"",
			"pub fn soln(input: String) -> String {",
    	"  return format_soln_string(",
      "    \"Incomplete\".to_string(),",
      "    \"Incomplete\".to_string()",
    	"  );",
			"}",
			"",
			"/*",
			"",
			"*/",
			""
		]
	},
	"Haskell boilerplate": {
		"scope": "haskell",
		"prefix": "hsbp",
		"body": [
			"module $1.$2 where",
			"import Util (splitByChar)",
			"",
			"soln :: String -> (String, String)",
			"soln input = do",
			"  let input' = splitByChar '\\n' input",
			"  (\"incomplete\", \"incomplete\")",
			"",
			"{-",
			"$0",
			"-}"
		]
	}
}